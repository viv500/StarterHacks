{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\haris\\\\OneDrive\\\\Documents\\\\GitHub\\\\StarterHacks\\\\transcript-example\\\\src\\\\LiveTranscription.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LiveTranscription = () => {\n  _s();\n  const [transcript, setTranscript] = useState('');\n  const [recognition, setRecognition] = useState(null);\n  useEffect(() => {\n    if (!('webkitSpeechRecognition' in window)) {\n      alert('Your browser does not support the Web Speech API.');\n      return;\n    }\n    const SpeechRecognition = window.webkitSpeechRecognition;\n    const recognition = new SpeechRecognition();\n    recognition.continuous = true;\n    recognition.interimResults = true;\n    recognition.lang = 'en-US';\n    recognition.onresult = event => {\n      let interimTranscript = '';\n      let finalTranscript = '';\n      for (let i = event.resultIndex; i < event.results.length; i++) {\n        if (event.results[i].isFinal) {\n          finalTranscript += event.results[i][0].transcript + ' ';\n        } else {\n          interimTranscript += event.results[i][0].transcript;\n        }\n      }\n      setTranscript(prevTranscript => prevTranscript + finalTranscript);\n      document.getElementById('interim').innerHTML = interimTranscript;\n    };\n    recognition.onerror = event => {\n      console.error('Speech recognition error detected: ' + event.error);\n    };\n    setRecognition(recognition);\n  }, []);\n  const startRecognition = () => {\n    if (recognition) {\n      recognition.start();\n    }\n  };\n  const stopRecognition = () => {\n    if (recognition) {\n      recognition.stop();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: startRecognition,\n      children: \"Start Transcription\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: stopRecognition,\n      children: \"Stop Transcription\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: transcript\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      id: \"interim\",\n      style: {\n        color: 'gray'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n};\n_s(LiveTranscription, \"D0AebQ+YIelTB+4fcC8x16e0LLk=\");\n_c = LiveTranscription;\nexport default LiveTranscription;\nvar _c;\n$RefreshReg$(_c, \"LiveTranscription\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","LiveTranscription","_s","transcript","setTranscript","recognition","setRecognition","window","alert","SpeechRecognition","webkitSpeechRecognition","continuous","interimResults","lang","onresult","event","interimTranscript","finalTranscript","i","resultIndex","results","length","isFinal","prevTranscript","document","getElementById","innerHTML","onerror","console","error","startRecognition","start","stopRecognition","stop","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","id","style","color","_c","$RefreshReg$"],"sources":["C:/Users/haris/OneDrive/Documents/GitHub/StarterHacks/transcript-example/src/LiveTranscription.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst LiveTranscription = () => {\r\n  const [transcript, setTranscript] = useState('');\r\n  const [recognition, setRecognition] = useState(null);\r\n\r\n  useEffect(() => {\r\n    if (!('webkitSpeechRecognition' in window)) {\r\n      alert('Your browser does not support the Web Speech API.');\r\n      return;\r\n    }\r\n    \r\n    const SpeechRecognition = window.webkitSpeechRecognition;\r\n    const recognition = new SpeechRecognition();\r\n    recognition.continuous = true;\r\n    recognition.interimResults = true;\r\n    recognition.lang = 'en-US';\r\n    \r\n    recognition.onresult = (event) => {\r\n      let interimTranscript = '';\r\n      let finalTranscript = '';\r\n\r\n      for (let i = event.resultIndex; i < event.results.length; i++) {\r\n        if (event.results[i].isFinal) {\r\n          finalTranscript += event.results[i][0].transcript + ' ';\r\n        } else {\r\n          interimTranscript += event.results[i][0].transcript;\r\n        }\r\n      }\r\n\r\n      setTranscript(prevTranscript => prevTranscript + finalTranscript);\r\n      document.getElementById('interim').innerHTML = interimTranscript;\r\n    };\r\n\r\n    recognition.onerror = (event) => {\r\n      console.error('Speech recognition error detected: ' + event.error);\r\n    };\r\n\r\n    setRecognition(recognition);\r\n  }, []);\r\n\r\n  const startRecognition = () => {\r\n    if (recognition) {\r\n      recognition.start();\r\n    }\r\n  };\r\n\r\n  const stopRecognition = () => {\r\n    if (recognition) {\r\n      recognition.stop();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={startRecognition}>Start Transcription</button>\r\n      <button onClick={stopRecognition}>Stop Transcription</button>\r\n      <p>{transcript}</p>\r\n      <p id=\"interim\" style={{ color: 'gray' }}></p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LiveTranscription;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}